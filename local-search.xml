<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>在 Mac 上安装 Git ，生成 SSH 密钥用于 GitHub 授权</title>
    <link href="undefined2019/10/04/%E5%9C%A8-Mac-%E4%B8%8A%E5%AE%89%E8%A3%85-Git-%EF%BC%8C%E7%94%9F%E6%88%90-SSH-%E5%AF%86%E9%92%A5%E7%94%A8%E4%BA%8E-GitHub-%E6%8E%88%E6%9D%83/"/>
    <url>2019/10/04/%E5%9C%A8-Mac-%E4%B8%8A%E5%AE%89%E8%A3%85-Git-%EF%BC%8C%E7%94%9F%E6%88%90-SSH-%E5%AF%86%E9%92%A5%E7%94%A8%E4%BA%8E-GitHub-%E6%8E%88%E6%9D%83/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在本教程中，将介绍如何在 Mac 上安装 Git，如何生成SSH密钥，以及如何将您的公共 SSH 密钥上传到 GitHub 帐户进行授权。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20190920090245710.png" srcset="/img/loading.gif" alt="在这里插入图片描述"></p><h1 id="如何在你的-Mac-上安装-Git-？"><a href="#如何在你的-Mac-上安装-Git-？" class="headerlink" title="如何在你的 Mac 上安装 Git ？"></a>如何在你的 Mac 上安装 Git ？</h1><p>打开‘终端’输入如下命令：</p><pre><code class="xml">$ brew install git</code></pre><blockquote><p> 具体方法查看其官方文档 ：<a href="https://brew.sh/" target="_blank" rel="noopener">https://brew.sh/</a></p></blockquote><p>这将在您的系统上安装 Git。<br>若要确认是否安装成功，请输入：</p><pre><code class="xml">$ git --version</code></pre><p>这样你就能看到目前的 Git 版本。</p><h1 id="如何为-GitHub-授权生成-SSH-密钥"><a href="#如何为-GitHub-授权生成-SSH-密钥" class="headerlink" title="如何为 GitHub 授权生成 SSH 密钥"></a>如何为 GitHub 授权生成 SSH 密钥</h1><h4 id="打开你的终端"><a href="#打开你的终端" class="headerlink" title="打开你的终端"></a>打开你的终端</h4><h4 id="输入-cd-来到你的根目录下"><a href="#输入-cd-来到你的根目录下" class="headerlink" title="输入  cd ~/  来到你的根目录下"></a>输入  <strong>cd ~/</strong>  来到你的根目录下</h4><h4 id="输入以下指令："><a href="#输入以下指令：" class="headerlink" title="输入以下指令："></a>输入以下指令：</h4><pre><code class="xml">ssh-keygen -t rsa</code></pre><ul><li>这时系统将提示您输入一个文件名来存储密钥 </li><li>只需按 ‘回车’ 接受默认文件 (/Users/you/.ssh/id_rsa) 即可</li><li>然后它会要求您创建一个密码。你可以进行设定，但我一般选择直接回车（这样密码就为空，不用专门去记）</li></ul><h4 id="当你再次按下‘回车’时，以下两个文件就会被建立了"><a href="#当你再次按下‘回车’时，以下两个文件就会被建立了" class="headerlink" title="当你再次按下‘回车’时，以下两个文件就会被建立了"></a>当你再次按下‘回车’时，以下两个文件就会被建立了</h4><pre><code class="xml">~/.ssh/id_rsa~/.ssh/id_rsa.pub</code></pre><h4 id="最后一步："><a href="#最后一步：" class="headerlink" title="最后一步："></a>最后一步：</h4><p>我们需要的 SSH 公钥存储在以.pub结尾的文件中，即：<br><code>~/.ssh/id_rsa.pub</code></p><h1 id="如何复制公共-SSH-密钥"><a href="#如何复制公共-SSH-密钥" class="headerlink" title="如何复制公共 SSH 密钥"></a>如何复制公共 SSH 密钥</h1><p>为了使用 GitHub 验证您自己和您的设备，您需要将上面生成的公共 SSH密钥 上传到你的 GitHub 帐户。</p><p><strong>复制公共SSH密钥</strong></p><p>你不需要去寻找这个 .pub 文件，你只需要打开终端并输入：</p><pre><code class="xml">$ pbcopy &lt; ~/.ssh/id_rsa.pub</code></pre><p>这将直接复制 <code>id_rsa</code> 文件内的内容。</p><h1 id="如何上传您的公共-SSH-密钥到-GitHub"><a href="#如何上传您的公共-SSH-密钥到-GitHub" class="headerlink" title="如何上传您的公共 SSH 密钥到 GitHub"></a>如何上传您的公共 SSH 密钥到 GitHub</h1><ol><li>复制了公共SSH密钥后，登录到GitHub帐户并转到 <a href="https://github.com/settings/profile" target="_blank" rel="noopener">https://github.com/settings/profile</a></li><li>在左侧菜单中，您将看到一个链接“SSH和GPG密钥”</li><li>单击该链接，它将带您进入一个页面，您可以在这里输入您之前复制的公共SSH密钥。</li><li>点击“新建SSH密钥”按钮</li><li>然后输入一个标题名称——可以是任何东西，例如 newMac</li><li>将公共SSH密钥粘贴到密钥文本框中</li><li>点击“添加SSH密钥”</li></ol><h1 id="大功告成！测试你的GitHub授权"><a href="#大功告成！测试你的GitHub授权" class="headerlink" title="大功告成！测试你的GitHub授权:"></a>大功告成！测试你的GitHub授权:</h1><p>打开你的终端输入</p><pre><code class="xml">$ git clone git@github.com:你的用户名/你的某个仓库名.git</code></pre><ol><li>它会问你是否想继续连接，输入 <code>yes</code></li><li>如果您在生成公钥时创建了一个密码，那么它将要求您输入它。</li><li>输入密码并按<code>Enter</code>键。</li><li>然后，它将开始将项目克隆到您当前的目录中。</li></ol><p><strong>现在，您已经准备好使用Git和GitHub了。有问题欢迎在评论区留言</strong></p><blockquote><p>欢迎关注我的博客获得更多知识</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
      <tag>SSH</tag>
      
      <tag>GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每个人都要学的图片压缩终极奥义，有效解决 Android 程序 OOM</title>
    <link href="undefined2019/10/03/101837623/"/>
    <url>2019/10/03/101837623/</url>
    
    <content type="html"><![CDATA[<h1 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h1><hr><blockquote><p>在我们编写 <code>Android</code> 程序的时候，几乎永远逃避不了图片压缩的难题。除了应用图标之外，我们所要显示的图片基本上只有两个来源：</p><ul><li>来自网络下载</li><li>本地相册中加载</li></ul></blockquote><p>不管是网上下载下来的也好，还是从系统图片库中读取的图片，都有一个相同的特点：像素一帮较高。同时我们都知道，<code>Android</code> 系统分配给我们每个应用的内存是有限的，由于解析、加载一张图片，需要占用的内存大小，是远大于图片自身大小的。所以，这时程序就可能因为占用了过多的内存，从而出现<code>OOM</code> 现象。那么什么是 <code>OOM</code> 呢？</p><p><code>OOM</code> 即 <code>OutOfMemory</code> 异常，也就是我们所说的 内存溢出 ，其一般表现为应用闪退等现象。那么我们该如何下手去解决呢？</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><hr><p>首先我们发现，我们所加载的这些图片的分辨率，要比我们手机屏幕高得多，更有甚者，我们在一个拇指大的控件上，去加载一个 4k 大图是完全没有必要的，也就是说，如果我们能让每个控件上都去显示相应大小的图片，那么这个问题也就迎刃而解了</p><p>那么，要怎样才能达到图片与控件的对号入座？这时我们就引进了图片压缩的方案：</p><ul><li>首先，获得原图片大小</li><li>其次，获取控件大小</li><li>接着，获取我们图片和控件的比例</li><li>最后，根据这一比例，将图片压缩为适合显示的大小</li></ul><p>那么就让我们开始吧：</p><h1 id="获取原图大小"><a href="#获取原图大小" class="headerlink" title="获取原图大小"></a>获取原图大小</h1><hr><p>我们都知道，<code>Android 向我们提供了 BitmapFactory</code> 这个类，在这个类中有着诸如：<code>decodeResource()</code>  <code>decodeFile()</code>   <code>decodeStream()</code> 等。其中：</p><ul><li>decodeResource()  ：    用于解析资源文件，即 res 文件夹下的图片</li><li>decodeFile() ：               用于解析系统相册中的图片  </li><li>decodeStream() ：        用于解析输入输出流中图片通常，是采用 HttpClient 从下载的图片</li></ul><p>其他的方法这里就不多说了，因为在源码中我们可有i看到，几乎所有的方法，最后都会将图片解析为流的形式，最后调用 <code>decodeStream()</code> 方法，实例化出我们的 <code>Bitmap</code> 对象。</p><p>虽然这些方法对我们是再熟悉不过的了，但对于某些初学者而言，却经常忽略了一个重要的内部类 ：<code>BitmapFactory.Options</code> ，然而他确实我们图片压缩必不可少的，为什么需要这个参数呢？<code>Options</code> 的对象用于确定需要生成的 Bitmap 即目标图片的参数。<br>他的用法很简单，我们先 new 一个 <code>BitmapFactory.Options</code> 对象。再去调用含有 <code>Options</code> 参数的方法，如</p><ul><li><code>public static Bitmap decodeResource(Resources res, int id, Options opts)</code></li><li><code>public static Bitmap decodeResourceStream(@Nullable Resources res,@Nullable TypedValue value,@Nullable InputStream is, @Nullable Rect pad, @Nullable Options opts)</code></li></ul><p>调用完之后我们发现，除了方法放回给我们一个实例化出来的 <code>Bitmap</code> 图片之外，这个 <code>Options</code> 对象中长度、宽度、类型等等属性，也都被设置成了了我们图片的相应属性。所以，我们很容易想到：通过将 <code>Options</code> 对象传入，来获得图片的原始尺寸，为后期的压缩做准备，说干就干，我们将 <code>Options</code> 对象，和 <code>Resources</code>中一张 4k 图片的<code>id</code> 一块传入上诉方法中，来尝试获得它的尺寸，结果我们发现：程序 <code>OOM</code> 崩溃了！</p><p>为什么会发生这种情况？首先我们想想我们为什么要获得这个<code>Options</code> 对象？时为了获得图片的尺寸大小；那我们为什么要获得原图尺寸大小？是为了按照原图尺寸和控件尺寸的比例，将其压缩为适合显示的大小？那我们又为什么要去压缩它为合适的大小呢？是因为如果按照原大小去调用相应的 <code>decode...()</code>方法解析图片，会导致内存占有率过高触发<code>OOM</code> 异常，进而导致程序崩溃啊！没想到的是：结果我们为了获得 <code>Options</code> 而调用了相应的 <code>decode...()</code> 方法，的确 <code>Options</code> 是复制了，但由于该方法适用于生成图片，也就是 <code>Bitmap</code> 对象的。所以程序也在解析这张超大图的过程中<code>OOM</code> 崩溃了</p><p>那么难道就没方法了吗？</p><p>有的，我之前说过：<code>Option</code> 内部有着众多参数，其中有一个叫做：  <code>inJustDecodeBounds</code> 。这个参数默认值为<code>false</code> 。但如果我们先把这个参数设置为 true  时，该方法便不在会去生成相应的 <code>Bitmap</code> ，而仅仅是去测量图片的各种属性，如长度、宽度、类型等等，然后放回一个 <code>null</code> 。所以，我们很容易想到：可以先通过将 <code>inJustDecodeBounds</code> 的值设为 <code>true</code> ，再去调用相应的相应的 <code>decode...()</code>方法，最后再将<code>inJustDecodeBounds</code> 的值改回 <code>false</code> 。这种做法有两个好处：</p><ol><li>既能获得图片大小，由于后续操作</li><li>又成功避免了去解析图片，导致程序 <code>OOM</code> 而崩溃。</li></ol><p>但这恰恰是被很多人所忽略的一点。</p><h4 id="好了，现在给出具体的实现："><a href="#好了，现在给出具体的实现：" class="headerlink" title="好了，现在给出具体的实现："></a>好了，现在给出具体的实现：</h4><pre><code class="java">    public static void calculateOptionsById(@NonNull Resources res,@NonNull BitmapFactory.Options options, int imgId) {        BitmapFactory.decodeResource(res, imgId, options);    }</code></pre><blockquote><p>大家可能发现，这里只将 <code>inJustDecodeBounds</code> 设为<code>true</code>却没有改回<code>false</code> ，这是因为获得 <code>Options</code> 只是图片压缩的第一步，我们在后续方法中将会进行修改</p></blockquote><h1 id="如何进行压缩"><a href="#如何进行压缩" class="headerlink" title="如何进行压缩"></a>如何进行压缩</h1><hr><p>我们继续看 <code>Options</code> 的构成。我们发现，其中有个名为 <code>inSampleSize</code> 的数据成员，他就是关键所在，那么他有着什么意义呢？</p><p>这里我给大家举个例子，比如我这有张 4000*1000 像素的图片：</p><ul><li>当我们把 <code>inSampleSize</code>  的值设为 <code>4</code>时，最后生成出来的图片大小将会是：1000 x 250 像素 </li><li>当我们把<code>inSampleSize</code> 的值设为<code>5</code>时，最后生成出来的图片大小将会是：800 x 200 像素。这是个什么概念？</li></ul><p>这不仅仅是长宽都变为原来四分之一或者五分之一这么简单，而是其图片大小，直接变为原图的 <code>1/(n^2)</code>！也就是说：</p><ul><li>如果原图 <code>2MB</code>，那么当 <code>inSampleSize</code>  赋值为<code>4</code>加载时就只需要 <code>0.125MB</code></li><li>那 如果 <code>inSampleSize</code>  赋值为 <code>5</code> 呢？只需要 <code>0.08 MB</code>！连<code>100k</code> 都不到的小图啊！</li></ul><h4 id="那么下面我就给出这个方法的具体实现："><a href="#那么下面我就给出这个方法的具体实现：" class="headerlink" title="那么下面我就给出这个方法的具体实现："></a>那么下面我就给出这个方法的具体实现：</h4><pre><code class="java">    public static int calculateInSamplesizeByOptions(@NonNull BitmapFactory.Options options, int reqWidth, int reqHeight) {        int inSamplesize   = 1;        int originalWidth  = options.outWidth;        int originalHeight = options.outHeight;        if (originalHeight &gt; reqHeight || originalWidth &gt; reqWidth) {            int heightRatio = originalHeight / reqHeight;            int widthRatio  = originalWidth  / reqWidth;            inSamplesize = heightRatio &gt; widthRatio ? heightRatio : widthRatio;        }        return inSamplesize;    }</code></pre><p>我们发现，这里我先计算出了，原图尺寸与目标大小大比例，在三目运算符中，将<code>inSamplesize</code> 赋值为较大的一个。为什么不用小的那一个呢？这里我就卖个关子，大家可以在评论区中发表自己的想法</p><h1 id="生成目标图片"><a href="#生成目标图片" class="headerlink" title="生成目标图片"></a>生成目标图片</h1><hr><p>经过前面的两个步骤，想必大家已经能勾勒处这最后一步的做法了，思路非常简单：</p><ol><li>先生成一个 <code>Options</code>对象</li><li>将 <code>Options 的 inJustDecodeBounds</code>设置为<code>true</code></li><li>接着调用方法一<code>calculateOptionsById</code>获得原图尺寸到<code>Options</code>中</li><li>调用方法三<code>calculateInSamplesizeByOptions</code> 获得相应的<code>inSampleSize</code> 对象</li><li>将 <code>Options</code>的<code>inJustDecodeBounds</code>改回 <code>false</code></li><li>再次调用 <code>decode...()</code>方法（这里是 <code>decodeResource</code> ）获得压缩后的 <code>Bitmap</code>对象</li></ol><h4 id="具体实现如下"><a href="#具体实现如下" class="headerlink" title="具体实现如下"></a>具体实现如下</h4><pre><code class="java">    public static Bitmap decodeBitmapById (@NonNull Resources res, int resId, int reqWidth, int reqHeight) {        BitmapFactory.Options options = new BitmapFactory.Options();        options.inJustDecodeBounds = true;        calculateOptionsById(res, options, resId);        options.inSampleSize = calculateInSamplesizeByOptions(options, reqWidth, reqHeight);        options.inJustDecodeBounds = false;        Bitmap bitmap = BitmapFactory.decodeResource(res, resId, options);        return bitmap;    }</code></pre><p>非常棒，我们赶紧看看效果：</p><p><img src="https://img-blog.csdnimg.cn/2019100116455266.png" srcset="/img/loading.gif" alt></p><p>太棒了，几乎和原图效果一摸一样，但软件运行的流畅性确大大提高了！但是，这真的就完美了吗？</p><p>最求完美的我们可能会有个想法：如果调用我们方法的人，或者说特殊时候的我们。不想用这个已经写好的 <code>decodeBitmapById</code>方法，而是像自己通过前两个方法：<code>calculateOptionsById</code>  <code>calculateInSamplesizeByOptions</code> 来实现图片压缩功能，这是问题就出现了：</p><ul><li>调用 <code>calculateOptionsById</code>  前可能忘记，设置 <code>inJustDecodeBound</code> 为 <code>true</code> ，进而导致计算超大图时，直接发生 <code>OOM</code></li><li>调用完 <code>calculateInSamplesizeByOptions</code> 后可能忘记，设置<code>inJustDecodeBounds</code> 为 <code>false</code>，进而导致无法获得<code>Bitmap</code> 对象，一脸懵逼</li><li>啥都做了结果调用完 <code>calculateInSamplesizeByOptions</code> 没把没回的值赋给 <code>options.inSampleSize</code> ，白忙活一场</li></ul><p>所以，我们需要在优化一下：</p><p>首先，在<code>calculateOptionsById</code>中，默认将 <code>options.inJustDecodeBounds</code> 设置为<code>true</code>：</p><pre><code class="java">    public static void calculateOptionsById(@NonNull Resources res,@NonNull BitmapFactory.Options options, int imgId) {        options.inJustDecodeBounds = true;        BitmapFactory.decodeResource(res, imgId, options);    }</code></pre><p>其次，在 <code>calculateInSamplesizeByOptions</code>最后，默认将 <code>options.inJustDecodeBounds</code>设置为<code>false</code>：</p><pre><code class="java">    public static int calculateInSamplesizeByOptions(@NonNull BitmapFactory.Options options, int reqWidth, int reqHeight) {        int inSamplesize   = 1;        int originalWidth  = options.outWidth;        int originalHeight = options.outHeight;        if (originalHeight &gt; reqHeight || originalWidth &gt; reqWidth) {            int heightRatio = originalHeight / reqHeight;            int widthRatio  = originalWidth  / reqWidth;            inSamplesize = heightRatio &gt; widthRatio ? heightRatio : widthRatio;        }        options.inJustDecodeBounds = false;        return inSamplesize;    }</code></pre><p>为什么不在该方法后面，对 <code>options.inSampleSize</code>进行赋值呢？这主要是防止，有时我们可能只想得到计算相应比例来做其他操作，而不想改变原有属性，所以是否赋值，就交给用户去选择吧</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><hr><p>好了，到这里为止，历时有关图片压缩的所有坑坑洼洼都已经总结好了，我们从头理以边思路：</p><ol><li>借助<code>options.inJustDecodeBounds</code> 参数赋值<code>true</code>时，不生成图片的特性，将原图尺寸保存在 <code>Options</code> 中</li><li>通过 <code>options</code> 中原图尺寸与目标（控件）尺寸的比例，对 <code>options.inSampleSize</code> 进行设置</li><li>生成目标图片</li><li>压缩的问题解决了，但是每次打开图片都压缩也太麻烦了！下面我将针对这个问题进行更有效地解决 ，有兴趣可以继续关注 <strong><a href="https://blog.csdn.net/qq_43377749" target="_blank" rel="noopener">_yuanhao 的编程世界</a></strong></li></ol><h1 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h1><hr><p><a href="https://blog.csdn.net/qq_43377749/article/details/101197865" target="_blank" rel="noopener">Android 让你的 Room 搭上 RxJava 的顺风车 从重复的代码中解脱出来</a></p><p><a href="https://blog.csdn.net/qq_43377749/article/details/100856599" target="_blank" rel="noopener">ViewModel 和 ViewModelProvider.Factory：ViewModel 的创建者</a></p><p><a href="https://blog.csdn.net/qq_43377749/article/details/96324909" target="_blank" rel="noopener">单例模式-全局可用的 context 对象，这一篇就够了</a></p><p><a href="https://blog.csdn.net/qq_43377749/article/details/94156207" target="_blank" rel="noopener">缩放手势 ScaleGestureDetector 源码解析，这一篇就够了</a></p><p><a href="https://blog.csdn.net/qq_43377749/article/details/94155960" target="_blank" rel="noopener">看完这篇还不会 GestureDetector 手势检测，我跪搓衣板！</a></p><p><a href="https://blog.csdn.net/qq_43377749/article/details/92629161" target="_blank" rel="noopener">Android 属性动画框架 ObjectAnimator、ValueAnimator ，这一篇就够了</a></p><p><a href="https://blog.csdn.net/qq_43377749/article/details/92425865" target="_blank" rel="noopener">Android 逐帧动画（ Drawable 动画），这一篇就够了</a></p><p><a href="https://blog.csdn.net/qq_43377749/article/details/91890323" target="_blank" rel="noopener">看完这篇再不会 View 的动画框架，我跪搓衣板</a></p><p><a href="https://blog.csdn.net/qq_43377749/article/details/91474208" target="_blank" rel="noopener">Android 自定义时钟控件 时针、分针、秒针的绘制这一篇就够了</a></p><p><a href="https://blog.csdn.net/qq_43377749/article/details/91379915" target="_blank" rel="noopener">android 自定义控件之-绘制钟表盘</a></p><h3 id="请点赞！因为你的鼓励是我写作的最大动力！"><a href="#请点赞！因为你的鼓励是我写作的最大动力！" class="headerlink" title="请点赞！因为你的鼓励是我写作的最大动力！"></a>请点赞！因为你的鼓励是我写作的最大动力！</h3><hr><p>源码 Demo 链接：<strong><a href="https://github.com/FishInWater-1999/Drop/blob/master/app/src/main/java/com/example/drop/utils/BitmapBuilder.java" target="_blank" rel="noopener">Drop 我第一次写的 Android 项目，希望大家点歌 star~ 谢谢！</a></strong></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OOM</tag>
      
      <tag>图片压缩</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>